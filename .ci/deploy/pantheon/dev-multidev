#!/bin/bash

set -eo pipefail

#
# This script deploys the build artifact to Pantheon.
# On the master branch the dev environment is used.
# Otherwise a multidev environment is used.
#

# Authenticate with Terminus
terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

# Prepare for Pantheon
composer run prepare-for-pantheon

GITHUB_API_URL="https://api.github.com/repos/$CI_PROJECT_USERNAME/$CI_PROJECT_REPONAME"
echo -e "\nFound github API url"

if [[ $CI_BRANCH != $DEFAULT_BRANCH ]]
then
  echo -e "\nBuilding a multidev."
  # Set TERMINUS_PARENT if it not configured.
  if [[ -z ${TERMINUS_PARENT+x} ]]; then
    TERMINUS_PARENT=$(curl -s -u "$CI_PROJECT_USERNAME:$GITHUB_TOKEN" {$GITHUB_API_URL}/pulls/{$PR_NUMBER} | jq -r '.base.ref')
  fi

  # See if the parent environment exists on Pantheon.
  if [ $(terminus env:list $TERMINUS_SITE --filter="id=$TERMINUS_PARENT" --field=id) ]
  then
    echo -e "\nFound parent #$TERMINUS_PARENT "
  else
    echo -e "\nParent will be dev."
    TERMINUS_PARENT='dev'
  fi
  # Create a new multidev environment (or push to an existing one)
  # If this environment is new, pull in the content from the parent.
  if [ $(terminus env:list $TERMINUS_SITE --filter="id=$TERMINUS_ENV" --field=id) ]
  then
    terminus -n build:env:create "$TERMINUS_SITE.$TERMINUS_PARENT" "$TERMINUS_ENV" --yes
  else
    terminus -n build:env:create "$TERMINUS_SITE.$TERMINUS_PARENT" "$TERMINUS_ENV" --clone-content --yes
  fi
else
  # Push to the dev environment
  terminus -n build:env:push "$TERMINUS_SITE.dev" --yes
fi

# Update the Drupal database
terminus -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- updatedb -y

# If exported configuration is available, then import it.
if [ -f "config/system.site.yml" ]; then
  terminus -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- config-import --yes
fi

# Clear Drupal cache
terminus -n drush "$TERMINUS_SITE.$TERMINUS_ENV" -- cr

# Clear the environment cache
terminus -n env:clear-cache $TERMINUS_SITE.$TERMINUS_ENV

# Ensure secrets are set
terminus -n secrets:set "$TERMINUS_SITE.$TERMINUS_ENV" token "$GITHUB_TOKEN" --file='github-secrets.json' --clear --skip-if-empty

# Delete old multidev environments associated
# with a PR that has been merged or closed.
terminus -n build:env:delete:pr $TERMINUS_SITE --yes
